var documenterSearchIndex = {"docs":
[{"location":"zermelo.html#Zermelo-problem,-example-1","page":"Zermelo navigation problem","title":"Zermelo problem, example 1","text":"","category":"section"},{"location":"zermelo.html","page":"Zermelo navigation problem","title":"Zermelo navigation problem","text":"    left\n    beginarrayl\n        displaystyle min - x_1(8) 05em\n        dotx_1(t) = x_2(t) + cos(u(t))  textfor ae  tin 0805em\n        dotx_2(t) = sin(u(t))   textfor ae  tin 08 05em\n        u(t) in -fracpi2 fracpi2  textfor ae  tin 08 05em\n        x(0) = 0_mathbbR^2 quad x_2(8) = 405em\n        x in mathbbR^2 mid 05  x_2  35  text is a loss control region\n    endarray\n    right","category":"page"},{"location":"zermelo.html#Reformulation-for-the-direct-method","page":"Zermelo navigation problem","title":"Reformulation for the direct method","text":"","category":"section"},{"location":"zermelo.html","page":"Zermelo navigation problem","title":"Zermelo navigation problem","text":"    left\n    beginarrayl\n        displaystyle min - x_1(8) + epsilonint_0^8 v^2(t)dt + int_0^1 f_NC(x(t))u^2(t)dt 05em\n        dotx_1(t) = f_C(x(t))(x_2(t) + cos(u(t))) + f_NC(x_2(t) + cos(lambda(t)))  textfor ae  tin 0805em\n        dotx_2(t) = f_C(x(t))sin(u(t)) + f_NC(x(t))sin(lambda(t))   textfor ae  tin 08 05em\n        dotlambda(t) = f_C(x(t))v^2(t)   textfor ae  tin 08 05em\n\n        u(t) in -fracpi2 fracpi2  textfor ae  tin 08 05em\n        x(0) = 0_mathbbR^2 quad x_2(8) = 405em\n        x in mathbbR^2 mid 05  x_2  35  text is a loss control region\n    endarray\n    right","category":"page"},{"location":"zermelo.html","page":"Zermelo navigation problem","title":"Zermelo navigation problem","text":"using JuMP  \nusing Ipopt\nusing Plots\nusing Plots.PlotMeasures\nusing LaTeXStrings\nusing OptimalControl\nusing NLPModelsIpopt\ninclude(\"smooth.jl\");","category":"page"},{"location":"zermelo.html","page":"Zermelo navigation problem","title":"Zermelo navigation problem","text":"I = [(0.5, 3.5)]\nε1 = 0.01  \nfNC(x) = fNC_bounded(x,I,ε1)\nplot(fNC,0., 5, label=\"fNC\")","category":"page"},{"location":"zermelo.html","page":"Zermelo navigation problem","title":"Zermelo navigation problem","text":"@def ocp begin\n\n    ε   = 1e-3\n    tf  = 8\n\n\n    t ∈ [ 0., tf ],                  time\n\n    q = [ x1, x2, λ, xu, xv ] ∈ R^5, state\n\n    ω = [u, v] ∈ R^2,                control\n\n    #initial conditions\n    x1(0) == 0\n    x2(0) == 0\n    xu(0) == 0\n    xv(0) == 0\n\n    #final condition\n    x2(tf) == 4\n\n    #control constraint\n    -π/2  ≤  u(t)  ≤ π/2\n\n    #state constraints\n    -π/2  ≤  λ(t)  ≤ π/2\n\n    #hybrid control system\n     q̇(t) == [fNC(x2(t))*(x2(t) + cos(λ(t))) + (1-fNC(x2(t)))*(x2(t) + cos(u(t))),\n             fNC(x2(t))*sin(λ(t)) +(1-fNC(x2(t)))*sin(u(t)),\n             (1-fNC(x2(t)))*v(t),\n             (v(t))^2,\n             fNC(x2(t))*(u(t))^2]\n\n    #cost function        \n    -x1(tf) + ε*xv(tf) + xu(tf) → min    \nend","category":"page"},{"location":"zermelo.html","page":"Zermelo navigation problem","title":"Zermelo navigation problem","text":"N = 500\nsol = solve(ocp; grid_size=N);","category":"page"},{"location":"zermelo.html","page":"Zermelo navigation problem","title":"Zermelo navigation problem","text":"plot(sol; layout=:group, size=(800, 300))","category":"page"},{"location":"zermelo.html#Zermelo-problem,-example-2","page":"Zermelo navigation problem","title":"Zermelo problem, example 2","text":"","category":"section"},{"location":"zermelo.html","page":"Zermelo navigation problem","title":"Zermelo navigation problem","text":"\n    left\n    beginarrayl\n        displaystyle min - x_1(8) 05em\n        dotx_1(t) = x_2(t) + cos(u(t))  textfor ae  tin 0805em\n        dotx_2(t) = sin(u(t))   textfor ae  tin 08 05em\n        u(t) in -fracpi2 fracpi2  textfor ae  tin 08 05em\n        x(0) = 0_mathbbR^2 quad x_2(8) = 405em\n        x in mathbbR^2 mid 5  x_1  10  text and  x in mathbbR^2 mid 20  x_1  25  text are loss control regions\n    endarray\n    right","category":"page"},{"location":"zermelo.html#Reformulation-for-the-direct-method-2","page":"Zermelo navigation problem","title":"Reformulation for the direct method","text":"","category":"section"},{"location":"zermelo.html","page":"Zermelo navigation problem","title":"Zermelo navigation problem","text":"\n    left\n    beginarrayl\n        displaystyle min - x_1(8) + varepsilon int_0^8 v^2(t)dt + int_0^8 f_NC(x(t))u^2(t)dt 05em\n        dotx_1(t) = f_C(x(t)) (x_2(t) + cos(u(t)))+f_NC(x(t)) (x_2(t) + cos(lambda(t)))  textfor ae  tin 0805em\n        dotx_2(t) =  f_C(x(t)) sin(u(t))+f_NC(x(t)) sin(lambda(t))   textfor ae  tin 08 05em\n        dotlambda(t) = f_C(x(t))v(t)   textfor ae  tin 08 05em\n        u(t)in -fracpi2 fracpi2   textfor ae  tin 08 05em\n        x(0) = 0_mathbbR^2 quad x_2(8) = 405em\n        x in mathbbR^2 mid 5  x_1  10  text and  x in mathbbR^2 mid 20  x_1  25  text are loss control regions\n    endarray\n    right","category":"page"},{"location":"zermelo.html","page":"Zermelo navigation problem","title":"Zermelo navigation problem","text":"using JuMP  \nusing Ipopt\nusing Plots\nusing Plots.PlotMeasures\nusing LaTeXStrings\nusing OptimalControl\nusing NLPModelsIpopt\ninclude(\"smooth.jl\");","category":"page"},{"location":"zermelo.html","page":"Zermelo navigation problem","title":"Zermelo navigation problem","text":"I = [(5, 10), (20, 25)]\nε1 = 0.05  \nfNC(x) = fNC_bounded(x,I,ε1)\nplot(fNC,0., 30, label=\"fNC\")","category":"page"},{"location":"zermelo.html","page":"Zermelo navigation problem","title":"Zermelo navigation problem","text":"@def ocp begin\n\n    ϵ  = 1e-3\n    \n    tf = 8\n\n    t ∈ [ 0., tf ],                  time\n\n    q = [ x1, x2, λ, xu, xv ] ∈ R^5, state\n\n    ω = [u, v] ∈ R^2,                control\n\n    #initial conditions\n    x1(0) == 0\n    x2(0) == 0\n    xu(0) == 0\n    xv(0) == 0\n\n    #final condition\n    x2(tf) == 4\n\n    #control constraint\n    -π/2  ≤  u(t)  ≤ π/2\n\n    #state constraints\n    -π/2  ≤  λ(t)  ≤ π/2\n\n    #hybrid control system\n     q̇(t) == [fNC(x1(t))*(x2(t) + cos(λ(t))) + (1-fNC(x1(t)))*(x2(t) + cos(u(t))),\n             fNC(x1(t))*sin(λ(t)) + (1-fNC(x1(t)))*sin(u(t)),\n             (1-fNC(x1(t)))*v(t),\n             (v(t))^2,\n             fNC(x1(t))*(u(t))^2]\n\n    #cost function        \n    -x1(tf) + ϵ*xv(tf) + xu(tf) → min    \nend","category":"page"},{"location":"zermelo.html","page":"Zermelo navigation problem","title":"Zermelo navigation problem","text":"N = 400\nsol = solve(ocp; grid_size=N);","category":"page"},{"location":"zermelo.html","page":"Zermelo navigation problem","title":"Zermelo navigation problem","text":"plot(sol; layout=:group, size=(800, 300))","category":"page"},{"location":"ho.html#Harmonic-oscillator-problem","page":"Harmonic oscillator problem","title":"Harmonic oscillator problem","text":"","category":"section"},{"location":"ho.html","page":"Harmonic oscillator problem","title":"Harmonic oscillator problem","text":"    left\n    beginarrayl\n        displaystyle min  T 05em\n        dotx_1(t) = x_2(t)  tin 0T05em\n        dotx_2(t) = u(t)-x_1(t) tin 0T  05em\n        u(t) in -1 1  tin 0T05em\n        x(0) = (420)  quad x(T) = 0_mathrmR^2 05em\n        x mid x_2  0 text is a control loss reigon\n    endarray\n    right","category":"page"},{"location":"ho.html#Reformulation-for-the-direct-method","page":"Harmonic oscillator problem","title":"Reformulation for the direct method","text":"","category":"section"},{"location":"ho.html","page":"Harmonic oscillator problem","title":"Harmonic oscillator problem","text":"    left\n    beginarrayl\n        displaystyle min  T + varepsilon int_0^T v^2(t)dt + int_0^T f_NC(x_2(t))u^2(t)dt 05em\n        dotx_1(t) = x_2(t)  tin 0T05em\n        dotx_2(t) =f_C(x_2(t))(u(t) - x_1(t)) + f_NC(x_2(t))(lambda(t) - x_1(t))\n         tin 0T  05em\n        dotlambda(t) = f_C(x_2(t))v(t) tin 0T05em\n        u(t) in -1 1  tin 0T05em\n        x(0) = (420)  quad x(T) = 0_mathrmR^2\n    endarray\n    right","category":"page"},{"location":"ho.html","page":"Harmonic oscillator problem","title":"Harmonic oscillator problem","text":"    using JuMP  \n    using Ipopt\n    using Plots\n    using Plots.PlotMeasures\n    using LaTeXStrings\n    using OptimalControl\n    using NLPModelsIpopt\n    include(\"smooth.jl\");","category":"page"},{"location":"ho.html","page":"Harmonic oscillator problem","title":"Harmonic oscillator problem","text":"a  = 0.0 \nε1 = 0.02\nfNC(x) = fNC_unboundedminus(x,a,ε1)\nplot(fNC,-1., 1, label=\"fNC\")","category":"page"},{"location":"ho.html","page":"Harmonic oscillator problem","title":"Harmonic oscillator problem","text":"@def ocp begin\n        \n    ε = 1e-3\n\n    tf ∈ R,                          variable\n\n    t ∈ [ 0., tf ],                  time\n\n    q = [ x1, x2, λ, xu, xv ] ∈ R^5, state\n\n    ω = [u, v] ∈ R^2,                control\n\n    tf ≥ 0.\n    \n    #initial conditions\n    x1(0) == 2.5\n    x2(0) == 4\n    xu(0) == 0\n    xv(0) == 0\n\n    #final condition\n    x1(tf) ==  1e-6\n    x2(tf) == -1e-6\n\n    #control constraint\n    -1. ≤  u(t)  ≤ 1.\n\n    #state constraint\n    -1 ≤  λ(t) ≤ 1,             (1)\n    -5 ≤ x1(t) ≤ 5,             (2)\n    -5 ≤ x2(t) ≤ 5,             (3)\n\n    #hybrid control system\n    q̇(t) == [x2(t), (1-fNC(x2(t)))*u(t) + fNC(x2(t))*λ(t) - x1(t), (1-fNC(x2(t)))*v(t), (v(t))^2, fNC(x2(t))*(u(t))^2]\n\n    #cost function        \n    tf + ε*xv(tf) + xu(tf) → min    \nend","category":"page"},{"location":"ho.html","page":"Harmonic oscillator problem","title":"Harmonic oscillator problem","text":"    sol = solve(ocp; init = (state = t -> [0.1, 0.1, 1, 0, 0], control =[-1, 0], variable =15), max_iter=650)","category":"page"},{"location":"ho.html","page":"Harmonic oscillator problem","title":"Harmonic oscillator problem","text":"    plot(sol; layout=:group, size=(800, 300))","category":"page"},{"location":"index.html#Loss-control-regions-in-optimal-control-problems","page":"Introduction","title":"Loss control regions in optimal control problems","text":"","category":"section"},{"location":"index.html#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"General context. Optimal control theory studies controlled systems to achieve desired targets with minimal cost. The Pontryagin maximum principle (PMP) provides necessary conditions for optimality, ensuring an adjoint vector (or costate) meets the Hamiltonian maximization condition.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Typically, optimal control involves permanent control, allowing modification of the control function at each time instant. However, practical constraints can lead to nonpermanent control. For instance, digital controls result in sampled-data control with discrete changes. In aerospace, eclipse constraints limit control for solar-powered satellites in a shadow region where the control is reduced to zero. Hence, it is desirable to keep the system outside these regions.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"(Image: aerospace) ","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"    beginequation\n    beginaligned\n    textminimize  -x_1(8) 10pt\n    textsubject to  (xu) in mathrmAC(08mathbbR^2) times mathrmL^infty(08mathbbR) 6pt\n      dotx_1(t) = x_2(t) + cos(u(t)) quad textae  t in 08 6pt\n      dotx_2(t) = sin(u(t)) quad textae  t in 08 6pt\n      x(0)=0_mathbbR^2 quad x_2(8)=4 6pt\n      u(t) in left-fracpi2fracpi2right quad textae  t in 08 6pt\n      u text is constant when  x text is in the loss control region  x in mathbbR^2 mid 05  x_2  35 \n    endaligned\n    endequation","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Objective and approach. Here, we address optimal control problems with loss control regions[1], where the state space is divided into control regions and loss control regions. In control regions, control can change at any time, while in loss control regions, control must remain constant, though its value is to be optimized and can vary with each visit.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"We extend our previous work by using a permanent control for control regions and a regionally switching parameter for loss control regions. This leads to a discontinuous dynamics framework, fitting into spatially hybrid optimal control theory. The hybrid maximum principle (HMP) extends the PMP to hybrid settings, with a piecewise absolutely continuous adjoint vector.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Numerical contribution. In this note we illustrate a two-step numerical method for optimal control problems with loss control regions. First, a direct numerical approach is applied to a regularized problem to manage discontinuities and outline the optimal trajectory's structure. Second, this helps initialize an indirect numerical method for the original problem, using the PMP from Theorem~1. The method incorporates the averaged Hamiltonian gradient condition and adjoint vector discontinuities to define an appropriate shooting function, adding to classical terms for non-hybrid optimal control problems (see ref).","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"note: Contents\nProvide a statement of the PMP with loss control regions.\nProvide a direct method for solving optimal control problems with loss control regions (based on a regularization technique).\nProvide an indirect method (shooting method) for solving optimal control problems with loss control regions using the PMP with loss control regions.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"[1]: T. Bayen, A. Bouali, L. Bourdin & O. Cots, Loss control regions in optimal control problems, Journal of Differential Equations, 12 (2024) 405, 359-397.","category":"page"},{"location":"index.html#Dependencies","page":"Introduction","title":"Dependencies","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"All the numerical simulations to generate this documentation are performed with the following packages.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"using Pkg\nPkg.status()","category":"page"}]
}
